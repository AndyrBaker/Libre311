plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.8"
    id("io.micronaut.test-resources") version "3.7.8"
}

version = "0.1"
group = "app"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")

    implementation("io.micronaut.xml:micronaut-jackson-xml")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-tomcat")
    implementation("io.micronaut.objectstorage:micronaut-object-storage-gcp")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation('com.opencsv:opencsv:5.7.1')

    String databaseSelection = System.getenv("LIBRE311_DATABASE_DEPENDENCY")
    if (databaseSelection != null) {
        databaseSelection.split(',').each {part ->
            runtimeOnly(part)
        }
    } else {
        runtimeOnly("com.h2database:h2")
    }
}


application {
    mainClass.set("app.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("app.*")
    }
    // see https://micronaut-projects.github.io/micronaut-gradle-plugin/latest/#_configuring_the_test_resources_plugin
    testResources {
        enabled = true
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
}


tasks.register('copyClientResources', Copy) {
    dependsOn ':frontend:build'
    from "${project(':frontend').projectDir}/build"
    into "${project(':app').buildDir}/resources/main/public"
}

processResources {
    dependsOn 'copyClientResources'
}


